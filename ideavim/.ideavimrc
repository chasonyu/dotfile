let mapleader=" "

" ----------------------映射-----------------------
" 保持和D C命令行为一致
map Y y$
" 命令模式下按回车直接换行
nmap <CR> i<CR><Esc>
" 垂直分屏
nmap <Leader>wv :vsp<CR>
" 水平分屏
nmap <Leader>wg :sp<CR>
" 退出所有的缓冲区
nmap <Leader>wQ :qa<CR>
" 退出
nmap <Leader>wq :q<CR>
" 取消高亮
nmap <Leader><Space> :nohl<CR>
" 在normal下快速开启新的一行
nmap <Leader>o o<Esc>
" 在normal下快速开启新的一行(当前行上面)
nmap <leader>O O<Esc>
" ctrl+hjkl切换分屏的窗口 nmap <BackSpace> <c-w>h
nmap <c-k> <c-w>k
nmap <c-j> <c-w>j
nmap <c-l> <c-w>l

" -----------------基本配置------------------
"vim使用系统剪切板
set clipboard=unnamedplus,unnamed
"窗口下面显示当前时哪个模式
set showmode
"在下方显示你当前输入的命令，比如输入f来搜索，下面会显示出f
set showcmd
"翻页的时候控制光标保持在第几行
set scrolloff=1
"记忆的历史命令数量
set history=500
" 启动vim 时关闭折叠代码
set nofoldenable
" 关闭兼容vi
set nocompatible
" 搜索
set hlsearch 
"高亮搜索结果
"实时增量显示搜索结果
set incsearch
"这两个用来配合搜索的时候输入小写时搜索会忽视大小写，输入驼峰时会大小写敏感
set ignorecase
set smartcase

" --------------------插件--------------------
set easymotion
set NERDTree
" s S 查找全文
set sneak
" 成双成对编辑 ys cs ds
set surround
" J 智能连接
set ideajoin
" % 跳转配对
set matchit
" 交换两个区域的代码 cx cxx cxc
set exchange
" f F t T查找时高亮候选字母
set quickscope
" gr grr将寄存器里面的内容和选择的文本对象交换"
set ReplaceWithRegister
" 增加了 ae ie两个文本对象
set textobj-entire
" 增加根据代码作用域的文本对象 ii ai aI
set textobj-indent
" 增加根据参数的文本对象 a
set argtextobj
" 高亮复制的内容
set highlightedyank
" 匹配段落时会把带有空格的空行当作普通空行
set vim-paragraph-motion
" 多光标操作
set multiple-cursors
" popup可用的功能按键
set which-key
" set commentary

" --------------------插件配置--------------------
" matchit 配置
nmap <c-m> %
" quick配置
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
let g:qs_primary_color = '#ff0000'
let g:qs_secondary_color = '#ff00ff'
" ReplaceWithRegister配置
" nnoremap <leader>r gr
" nnoremap <leader>rr grr
" highlightedyank 配置
let g:highlightedyank_highlight_duration = "1200"
let g:highlightedyank_highlight_color = "rgba(160, 160, 160, 155)"
" multi cursors配置
nmap <C-n> <Plug>NextWholeOccurrence
xmap <C-n> <Plug>NextWholeOccurrence
nmap <C-x> <Plug>SkipOccurrence
xmap <C-x> <Plug>SkipOccurrence
nmap <C-p> <Plug>RemoveOccurrence
xmap <C-p> <Plug>RemoveOccurrence
" 可用ctrl+G代替
" nmap <C-S-n> <Plug>AllWholeOccurrences
" xmap <C-S-n> <Plug>AllWholeOccurrences
" easymotion配置
map <leader>k <Plug>(easymotion-k)
map <leader>j <Plug>(easymotion-j)
map <leader>s <Plug>(easymotion-s)
" map <leader>E <Plug>(easymotion-F) 向后查找
" map <leader>e <Plug>(easymotion-f) 向前查找
" argtextobj配置
let g:argtextobj_pairs="[:],(:),<:>"
" which-key配置
set timeoutlen=5000
" 切换输入法配置
:set keep-english-in-normal-and-restore-in-insert

" --------------------idea映射--------------------
" Tab相关
noremap H :action PreviousTab<CR>
noremap L :action NextTab<CR>
" 运行相关
nnoremap <leader>rc :action ChooseRunConfiguration<CR>
nnoremap <Leader>rd :action Debug<CR>
nnoremap <Leader>rr :action Run<CR>
nnoremap <Leader>rj :action JRebel Debug<CR>
nnoremap <Leader>rt :action RunClass<CR>
nnoremap <Leader>rn :action ContextRun<CR>
nnoremap <Leader>rk :action Stop<CR>
nnoremap <Leader>ra :action RunAnything<CR>
" 重构相关
" c-, c-.用于找到上、下一个相同内容
nnoremap <Leader>R :action RenameElement<CR>
nnoremap <c-r> :action RenameElement<CR>
nmap U :action $Redo<CR>

" Git相关
nnoremap <Leader>vl :action Git.Pull<CR>
nnoremap <Leader>vc :action Vcs.QuickListPopupAction<CR>
" navigation

" vimrc相关
nnoremap <leader>ve :e ~/.ideavimrc<CR>
nnoremap <leader>vs :source ~/.ideavimrc<CR>

" 查找相关
nnoremap <leader>fa :action GotoAction<CR>
nnoremap <leader>ff :action GotoFile<CR>


nnoremap <leader>h :action HideAllWindows<CR>
nnoremap <leader>q :action HideActiveWindow<CR>

nnoremap [[ :action MethodUp<CR>
nnoremap ]] :action MethodDown<CR>
"Move code up and down

inoremap <c-l> <Esc>:action EditorCompleteStatement<CR>
nnoremap <Space>t :action Refactorings.QuickListPopupAction<CR>
vnoremap <Space>t :action Refactorings.QuickListPopupAction<CR>
nnoremap <leader>t :action ActivateTerminalToolWindow<CR>
"nnoremap <leader>t :action TerminalOpenInTerminal<CR>
"nnoremap <leader>kr :action IdeaVim.ReloadVimRc.reload<CR>
nnoremap <leader>b :action ShowNavBar<CR>
"nnoremap <leader>s :action FileStructurePopup<CR>
nnoremap <Space>o :action Move<CR>


nnoremap <Space>p :action IntroduceParameter<CR>
nnoremap <Space>c :action ExtractClass<CR>

nnoremap <Space>kh :action TypeHierarchy<CR>


"nnoremap gc :action GotoClass<CR>
nnoremap gI :action GotoImplementation<CR>
nnoremap gs :action GotoSuperMethod<CR>
nnoremap gt :action GotoTest<CR>
"nnoremap U :action FindUsages<CR>
nnoremap cc :action CommentByLineComment<CR>